CODIGO MAS MANTENIBLE Y EXTENSIBLE EN PROYECTOS MEDIOS-GRANDES

S (Single responsibility)
Principio de RESPONSABILIDAD ÚNICA
> Cada parte de mi aplicación debe tener una sola tarea asignada (responsabilidad).
> Si una parte de mi aplicación (componente, archivo, carpeta, objeto) tiene varias tareas,
entonces debe dividirse en subpartes; de forma tal que cada parte tenga una sola tarea.
* Ejemplo de la vida real => División del trabajo en una empresa
- Desarrollador
    - Front-End
    - Back-End / BBD
- Diseñador
* Ejemplo en REACT 
=> Pasar el Switch y toda su lógica a un solo componente
=> Dividir el AppBar

O (Open/Close)
Principio de ABIERTO/CERRADO
> Cada parte debe ser extensible, es decir, abierta para su extensión pero cerrada para su modificación.
> Cada parte de mi sistema debe poder contemplar varios casos de uso SIN CAMBIAR SU CÓDIGO NI SU ESTRUCTURA INTERNA
* Ejemplo de la vida real => Los Sistemas Operativos
* En REACT
=> Contemplar versión Mobile
=> Layouts
=> Children

L (Liskov substitution)
Principio de SUSTITUCION DE LISKOV
> Las partes de un proyecto deben ser reemplazadas fácilmente por sus subtipos
> Debo diseñar el programa de forma tal que no dependa de los tipos específicos
> Diseño por contratos / por intermediarios
* Ejemplo de la vida real => Andreani
1. Acerco a una oficina
2. Dejo el paquete (con los trámites necesarios)
3. Sé que lo manda un coche, pero no se específicamente qué coche lo manda.
* Distintos tipos de Router

I (Interface segregation)
Principio de SEGREGACION DE LA INTERFAZ
> Muchas interfaces cliente específicas son mejor que una gran interfaz de propósito general
> Solamente utilice lo que necesito en este momento (y no todo)
* Ejemplo en REACT =>
Preferir muchos export const pequeños a un solo export default grande
Usar varios archivos, uno para cada tipo de recurso de la api, en vez de un solo gran archivo cliente

D (Dependency Inversion)
Principio de INVERSION DE DEPENDENCIAS
> Las distintas partes de mi aplicación deben depender de abstracciones (no de datos concretos)
* Ejemplo en REACT
=> Pasar datos compartidos a través de las props en vez del state (con Redux / Context)

